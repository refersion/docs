{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Refersion\n\n\nContent TBD", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-refersion", 
            "text": "Content TBD", 
            "title": "Welcome to Refersion"
        }, 
        {
            "location": "/graphql-api/overview/", 
            "text": "Overview\n\n\nIntroduction\n\n\nThe Refersion GraphQL API allows you to query your dataset of affiliate activity through a new unified interface.\n\n\nWhat is GraphQL?\n\n\nGraphQL is a new way to think about building and querying APIs. Rather than construct several REST requests to fetch data that you\u2019re interested in, you can often make a single call to fetch the information you need. Additionally you can specify exactly which fields you want included in the response.\n\n\nGraphQL is, above all, a querying language, and the format of the query you send matches the data you receive. The language has a schema that strongly types the exchange between client and server.\n\n\nRunning Queries\n\n\nGraphQL is hierarchical. Fields between curly braces \u2013 which are also at the next level of indent \u2013 are part of the enclosing type. For example, \nid\n and \nemail\n are fields available as part of the \naffiliate\n type and \ncommission\n is a part of \noffer\n.\n\n\nWhy GraphQL?\n\n\nWe\u2019re supporting GraphQL because it offers much more flexibility than a traditional REST interface. GraphQL natively supports performing an introspection query which allows the API to more fully discoverable and easier to integrate against. The ability to define and specify precisely the data you want for your integration is a powerful advantage over the existing REST endpoints. Through fragments and template variables it simplifies many aspects of the client-side integration process. Additionally, because it\u2019s a recognized spec, there are many client libraries and tools to assist you in quickly getting up and running.\n\n\nAdditional Resources\n\n\nBelow is some optional reading material that might help you go deeper into the GraphQL ecosystem:\n\n\n\n\nGraphQL Specification\n\n\nIntroduction to GraphQL\n\n\nThe Fullstack Tutorial for GraphQL\n\n\nList of GraphQL Tools", 
            "title": "Overview"
        }, 
        {
            "location": "/graphql-api/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/graphql-api/overview/#introduction", 
            "text": "The Refersion GraphQL API allows you to query your dataset of affiliate activity through a new unified interface.", 
            "title": "Introduction"
        }, 
        {
            "location": "/graphql-api/overview/#what-is-graphql", 
            "text": "GraphQL is a new way to think about building and querying APIs. Rather than construct several REST requests to fetch data that you\u2019re interested in, you can often make a single call to fetch the information you need. Additionally you can specify exactly which fields you want included in the response.  GraphQL is, above all, a querying language, and the format of the query you send matches the data you receive. The language has a schema that strongly types the exchange between client and server.", 
            "title": "What is GraphQL?"
        }, 
        {
            "location": "/graphql-api/overview/#running-queries", 
            "text": "GraphQL is hierarchical. Fields between curly braces \u2013 which are also at the next level of indent \u2013 are part of the enclosing type. For example,  id  and  email  are fields available as part of the  affiliate  type and  commission  is a part of  offer .", 
            "title": "Running Queries"
        }, 
        {
            "location": "/graphql-api/overview/#why-graphql", 
            "text": "We\u2019re supporting GraphQL because it offers much more flexibility than a traditional REST interface. GraphQL natively supports performing an introspection query which allows the API to more fully discoverable and easier to integrate against. The ability to define and specify precisely the data you want for your integration is a powerful advantage over the existing REST endpoints. Through fragments and template variables it simplifies many aspects of the client-side integration process. Additionally, because it\u2019s a recognized spec, there are many client libraries and tools to assist you in quickly getting up and running.", 
            "title": "Why GraphQL?"
        }, 
        {
            "location": "/graphql-api/overview/#additional-resources", 
            "text": "Below is some optional reading material that might help you go deeper into the GraphQL ecosystem:   GraphQL Specification  Introduction to GraphQL  The Fullstack Tutorial for GraphQL  List of GraphQL Tools", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/graphql-api/getting-started/", 
            "text": "Getting Started\n\n\nYou\u2019ll need an active Refersion account to make API requests. Start your free trial or contact helpme@refersion.com.\n\n\nBase URL\n\n\nAll URLs referenced in the documentation have the following base:\n\n\nhttps://graphql.refersion.com\n\n\nSSL/HTTPS\n\n\nThe Refersion GraphQL API is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.\n\n\nAuthentication\n\n\nIn order to make calls to our API you need to include your API key along with the request. You may obtain your API key from your \nAPI Settings\n page while logged in.\n\n\nWe look for your API key in the Authentication header.\n\n\n$ curl \nhttps://graphql.refersion.com\n\n  -H \nAuthorization: Bearer [YOUR KEY]\n\n\n\n\n\n\n\n\nInfo\n\n\nIt is very important to store your API key in a private and secure location. Sharing your API key is strictly prohibited.\n\n\n\n\nQuota \n Usage\n\n\nEach request will return your current usage in the response headers.\n\n\n\n\n\n\n\n\nHeader\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nX-Quota-Limit\n\n\nYour current request limit\n\n\n\n\n\n\nX-Quota-Remaining\n\n\nNumber of remainging requests in the current period\n\n\n\n\n\n\nX-Quota-Reset\n\n\nThe unix timestamp (seconds, UTC) of the start of the next quota period.\n\n\n\n\n\n\n\n\nExample Query\n\n\nThe query below also demonstrates using GraphQL fragments on \naffiliate\n to query for information specific to a sub-type. In this case, we request a list of affiliates along with the respective offer that they are assigned to.\n\n\nbase {\n  affiliates(limit: 2) {\n    id\n    email\n    offer {\n      commission\n      type\n    }\n  }\n}\n\n\n\n\n\n\n\nQuery type must be \"base\"\n\n\nPlease make sure to start every query with the \"base\" query type as seen above. Currenty this is the only supported query type.\n\n\n\n\nThis response returns: \n\n\n{\n\n    \ndata\n:\n \n{\n\n        \naffiliates\n:\n \n[\n\n            \n{\n\n                \nid\n:\n \n444\n,\n\n                \nemail\n:\n \njane.verde@aol.com\n,\n\n                \noffer\n:\n \n{\n\n                    \ncommission\n:\n \n10\n,\n\n                    \ntype\n:\n \nFLAT_RATE\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \nid\n:\n \n419\n,\n\n                \nemail\n:\n \nmike.rogers@hotmail.com\n,\n\n                \noffer\n:\n \n{\n\n                    \ncommission\n:\n \n10\n,\n\n                    \ntype\n:\n \nFLAT_RATE\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}", 
            "title": "Getting Started"
        }, 
        {
            "location": "/graphql-api/getting-started/#getting-started", 
            "text": "You\u2019ll need an active Refersion account to make API requests. Start your free trial or contact helpme@refersion.com.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/graphql-api/getting-started/#base-url", 
            "text": "All URLs referenced in the documentation have the following base:  https://graphql.refersion.com", 
            "title": "Base URL"
        }, 
        {
            "location": "/graphql-api/getting-started/#sslhttps", 
            "text": "The Refersion GraphQL API is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.", 
            "title": "SSL/HTTPS"
        }, 
        {
            "location": "/graphql-api/getting-started/#authentication", 
            "text": "In order to make calls to our API you need to include your API key along with the request. You may obtain your API key from your  API Settings  page while logged in.  We look for your API key in the Authentication header.  $ curl  https://graphql.refersion.com \n  -H  Authorization: Bearer [YOUR KEY]    Info  It is very important to store your API key in a private and secure location. Sharing your API key is strictly prohibited.", 
            "title": "Authentication"
        }, 
        {
            "location": "/graphql-api/getting-started/#quota-usage", 
            "text": "Each request will return your current usage in the response headers.     Header  Description      X-Quota-Limit  Your current request limit    X-Quota-Remaining  Number of remainging requests in the current period    X-Quota-Reset  The unix timestamp (seconds, UTC) of the start of the next quota period.", 
            "title": "Quota &amp; Usage"
        }, 
        {
            "location": "/graphql-api/getting-started/#example-query", 
            "text": "The query below also demonstrates using GraphQL fragments on  affiliate  to query for information specific to a sub-type. In this case, we request a list of affiliates along with the respective offer that they are assigned to.  base {\n  affiliates(limit: 2) {\n    id\n    email\n    offer {\n      commission\n      type\n    }\n  }\n}   Query type must be \"base\"  Please make sure to start every query with the \"base\" query type as seen above. Currenty this is the only supported query type.   This response returns:   { \n     data :   { \n         affiliates :   [ \n             { \n                 id :   444 , \n                 email :   jane.verde@aol.com , \n                 offer :   { \n                     commission :   10 , \n                     type :   FLAT_RATE \n                 } \n             }, \n             { \n                 id :   419 , \n                 email :   mike.rogers@hotmail.com , \n                 offer :   { \n                     commission :   10 , \n                     type :   FLAT_RATE \n                 } \n             } \n         ] \n     }  }", 
            "title": "Example Query"
        }
    ]
}