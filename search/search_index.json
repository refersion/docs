{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Refersion\n\n\nThank you for being a part of the Refersion developer community. \n\n\nOur set of APIs allow you to:\n\n\n\n\nAutomate your affiliate and conversion approval process\n\n\nGenerate real-time reports in order to track performance\n\n\nIntegrate Refersion into existing work flows\n\n\n\n\nCurrently available APIs:\n\n\n\n    \n\n        \n\n            \nGraphQL is a new and exciting API for ad hoc queries and manipulation. It is extremely flexible and provides many benefits.\nLearn More \n\n            \nOur REST API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors.\nLearn More", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-refersion", 
            "text": "Thank you for being a part of the Refersion developer community.   Our set of APIs allow you to:   Automate your affiliate and conversion approval process  Generate real-time reports in order to track performance  Integrate Refersion into existing work flows   Currently available APIs:  \n     \n         \n             GraphQL is a new and exciting API for ad hoc queries and manipulation. It is extremely flexible and provides many benefits. Learn More  \n             Our REST API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. Learn More", 
            "title": "Welcome to Refersion"
        }, 
        {
            "location": "/graphql-api/overview/", 
            "text": "GraphQL Overview\n\n\nWhat is GraphQL?\n\n\nGraphQL is a new way to think about building and querying APIs. Rather than construct several REST requests to pull data that you\u2019re interested in, you can fetch all the information you need in a single call. GraphQL allows you specify exactly which fields you need, making data querying more flexible and efficient than traditional REST APIs. \n\n\nExample request and response:\n\n\n\n\n\n\n\n\n\nGraphQL is, above all, a querying language, and the format of the query you send matches the data you receive. The language has a schema that strongly ties the exchange between client and server.\n\n\nWe built GraphQL API to supplement our existing REST API, giving you more flexibility to get exactly the data you need. \n\n\nAdditional Resources\n\n\nBelow is some optional reading material that might help you go deeper into the GraphQL ecosystem:\n\n\n\n\nGraphQL Specification\n\n\nIntroduction to GraphQL\n\n\nThe Fullstack Tutorial for GraphQL\n\n\nList of GraphQL Tools", 
            "title": "Overview"
        }, 
        {
            "location": "/graphql-api/overview/#graphql-overview", 
            "text": "", 
            "title": "GraphQL Overview"
        }, 
        {
            "location": "/graphql-api/overview/#what-is-graphql", 
            "text": "GraphQL is a new way to think about building and querying APIs. Rather than construct several REST requests to pull data that you\u2019re interested in, you can fetch all the information you need in a single call. GraphQL allows you specify exactly which fields you need, making data querying more flexible and efficient than traditional REST APIs.   Example request and response:     GraphQL is, above all, a querying language, and the format of the query you send matches the data you receive. The language has a schema that strongly ties the exchange between client and server.  We built GraphQL API to supplement our existing REST API, giving you more flexibility to get exactly the data you need.", 
            "title": "What is GraphQL?"
        }, 
        {
            "location": "/graphql-api/overview/#additional-resources", 
            "text": "Below is some optional reading material that might help you go deeper into the GraphQL ecosystem:   GraphQL Specification  Introduction to GraphQL  The Fullstack Tutorial for GraphQL  List of GraphQL Tools", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/graphql-api/getting-started/", 
            "text": "Getting Started\n\n\n\n\nImportant\n\n\nThis is a Beta API and is subject to change.\n\n\n\n\nEndpoint\n\n\nUnlike Refersion\u2019s REST API which has a variety of endpoints, the GraphQL API has a single endpoint:\n\n\n\n\nPOST https://graphql.refersion.com\n\n\n\n\n\n\n\nAuthentication\n\n\nThe GraphQL API requires an access token for making authenticated requests.\n\n\nGetting your access token\n\n\nRefersion merchants can obtain access token by logging into your Refersion account and navigating to \nAccount/Settings/Refersion API/GraphQL\n. \n\n\nIf you are a \nRefersion Marketplace\n user and would like to use GraphQL, please email us at \nhelpme@refersion.com\n to request access. Once GraphQL has been enabled on your account, the token will be available on your \nMarketplace Profile\n page.\n\n\nMaking your first query\n\n\nYou can access the GraphQL API endpoint using cURL or any other HTTP client. For the following test example, make sure to replace \nACCESS_TOKEN\n with the token you obtained from the Authentication section.  \n\n\ncurl\n\n\nTo make a query using curl, send a POST request with your query as the JSON payload.\n\n\ncurl -X POST \n\\\n\n\nhttps://graphql.refersion.com\n \n\\\n\n-H \nX-Refersion-Key: \nOUR_ACCESS_TOKEN\n \n\\\n\n-H \nContent-Type: application/json\n \n\\\n\n\n\n\n\n\nExample Query\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{  \n\n\n        offers { \n\n\n            offer_name, \n\n\n            commission, \n\n\n            type \n\n\n        } \n\n\n    }\n\n\n}", 
            "title": "Getting Started"
        }, 
        {
            "location": "/graphql-api/getting-started/#getting-started", 
            "text": "Important  This is a Beta API and is subject to change.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/graphql-api/getting-started/#endpoint", 
            "text": "Unlike Refersion\u2019s REST API which has a variety of endpoints, the GraphQL API has a single endpoint:   POST https://graphql.refersion.com", 
            "title": "Endpoint"
        }, 
        {
            "location": "/graphql-api/getting-started/#authentication", 
            "text": "The GraphQL API requires an access token for making authenticated requests.", 
            "title": "Authentication"
        }, 
        {
            "location": "/graphql-api/getting-started/#getting-your-access-token", 
            "text": "Refersion merchants can obtain access token by logging into your Refersion account and navigating to  Account/Settings/Refersion API/GraphQL .   If you are a  Refersion Marketplace  user and would like to use GraphQL, please email us at  helpme@refersion.com  to request access. Once GraphQL has been enabled on your account, the token will be available on your  Marketplace Profile  page.", 
            "title": "Getting your access token"
        }, 
        {
            "location": "/graphql-api/getting-started/#making-your-first-query", 
            "text": "You can access the GraphQL API endpoint using cURL or any other HTTP client. For the following test example, make sure to replace  ACCESS_TOKEN  with the token you obtained from the Authentication section.", 
            "title": "Making your first query"
        }, 
        {
            "location": "/graphql-api/getting-started/#curl", 
            "text": "To make a query using curl, send a POST request with your query as the JSON payload.  curl -X POST  \\  https://graphql.refersion.com   \\ \n-H  X-Refersion-Key:  OUR_ACCESS_TOKEN   \\ \n-H  Content-Type: application/json   \\", 
            "title": "curl"
        }, 
        {
            "location": "/graphql-api/getting-started/#example-query", 
            "text": "Sample query:   { \n     query :   {            offers {               offer_name,               commission,               type           }       }  }", 
            "title": "Example Query"
        }, 
        {
            "location": "/graphql-api/explore-refersion-graphql-using-voyager/", 
            "text": "Explore Refersion GraphQL using Voyager\n\n\nVoyager is a great tool to visualize Refersion GraphQL. Follow the steps below to explore the full set of data available through the API.\n\n\n\n\n\n\nPrepare a POST request:\n\n\nhttps://graphql.refersion.com\n \\\n-H \nX-Refersion-Key: \nYOUR_ACCESS_TOKEN\n \\\n-H \nContent-Type: application/graphql\n \\\n\n\n\n\n\n\n\n\n\nGo to \nhttps://apis.guru/graphql-voyager/\n and click \u201cCustom Schema\u201d\n\n\n\n\n\n\nClick \u201cCopy Introspection Query\u201d and paste it as the body of your POST request, keep your Voyager window open\n\n\n\n\n\n\nSend the POST request, copy the response and paste it back in Voyager (see below)\n\n\n\n\n\n\n\n\n\n\n\n\nPress \"CHANGE SCHEMA\"", 
            "title": "Explore Refersion GraphQL using Voyager"
        }, 
        {
            "location": "/graphql-api/explore-refersion-graphql-using-voyager/#explore-refersion-graphql-using-voyager", 
            "text": "Voyager is a great tool to visualize Refersion GraphQL. Follow the steps below to explore the full set of data available through the API.    Prepare a POST request:  https://graphql.refersion.com  \\\n-H  X-Refersion-Key:  YOUR_ACCESS_TOKEN  \\\n-H  Content-Type: application/graphql  \\    Go to  https://apis.guru/graphql-voyager/  and click \u201cCustom Schema\u201d    Click \u201cCopy Introspection Query\u201d and paste it as the body of your POST request, keep your Voyager window open    Send the POST request, copy the response and paste it back in Voyager (see below)       Press \"CHANGE SCHEMA\"", 
            "title": "Explore Refersion GraphQL using Voyager"
        }, 
        {
            "location": "/graphql-api/call-limits/", 
            "text": "Call Limits\n\n\nIn order to keep our service running a high level of performance, every account has a limit of requests. If you exceed your allotted limits, a 429 Too Many Requests error code will be returned and future requests may be throttled.\n\n\nEach request returns a maximum of 50 results, use \nPagination\n to fetch all your results with multiple requests.", 
            "title": "Call Limits"
        }, 
        {
            "location": "/graphql-api/call-limits/#call-limits", 
            "text": "In order to keep our service running a high level of performance, every account has a limit of requests. If you exceed your allotted limits, a 429 Too Many Requests error code will be returned and future requests may be throttled.  Each request returns a maximum of 50 results, use  Pagination  to fetch all your results with multiple requests.", 
            "title": "Call Limits"
        }, 
        {
            "location": "/graphql-api/pagination/", 
            "text": "Pagination\n\n\nRefersion GraphQL currently supports offset-based \npagination\n, which let\u2019s you offset the start of each page by the number specified. \n\n\nLet\u2019s say you\u2019d like to pull a list of all your May 2018 conversions, and there are 200 results in total. In order to get all 200 results, you\u2019d need to make a total of 4 requests (since each request returns a maximum of 50 results) using offsets. \n\n\nFirst request:\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        conversions (created_from: 1525132800 created_to: 1527202238 first: 50) {\n\n\n            affiliate {\n\n\n                name, \n\n\n                email\n\n\n            }, \n\n\n            total, \n\n\n            commission_total, \n\n\n            currency, \n\n\n            created\n\n\n        }\n\n\n    }\n\n\n}\n\n\n\n\n\n\nSecond request:\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        conversions (created_from: 1525132800 created_to: 1527202238 first: 50, offset: 50) {\n\n\n            affiliate {\n\n\n                name, \n\n\n                email\n\n\n            }, \n\n\n            total, \n\n\n            commission_total, \n\n\n            currency, \n\n\n            created\n\n\n        } \n\n\n    }\n\n\n}\n\n\n\n\n\n\nNotice the offset command, which fetches you the next 50 results starting from record #51\n\n\nThird request:\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        conversions (created_from: 1525132800 created_to: 1527202238 first: 50, offset: 100) { \n\n\n            affiliate {\n\n\n                name, \n\n\n                email\n\n\n            }, \n\n\n            total, \n\n\n            commission_total, \n\n\n            currency, \n\n\n            created\n\n\n        }\n\n\n    }\n\n\n}\n\n\n\n\n\n\nThis gets you records #101-150\n\n\nFourth request:\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        conversions (created_from: 1525132800 first: 50, offset: 150) { \n\n\n            affiliate {\n\n\n                name, \n\n\n                email\n\n\n            }, \n\n\n            total, \n\n\n            commission_total, \n\n\n            currency, \n\n\n            created\n\n\n        }\n\n\n    }\n\n\n}\n\n\n\n\n\n\nThis gets you records #151-200\n\n\nRepeat the above for larger number of results until you get all the data returned.", 
            "title": "Pagination"
        }, 
        {
            "location": "/graphql-api/pagination/#pagination", 
            "text": "Refersion GraphQL currently supports offset-based  pagination , which let\u2019s you offset the start of each page by the number specified.   Let\u2019s say you\u2019d like to pull a list of all your May 2018 conversions, and there are 200 results in total. In order to get all 200 results, you\u2019d need to make a total of 4 requests (since each request returns a maximum of 50 results) using offsets.", 
            "title": "Pagination"
        }, 
        {
            "location": "/graphql-api/pagination/#first-request", 
            "text": "Sample query:   { \n     query :   {           conversions (created_from: 1525132800 created_to: 1527202238 first: 50) {              affiliate {                  name,                   email              },               total,               commission_total,               currency,               created          }      }  }", 
            "title": "First request:"
        }, 
        {
            "location": "/graphql-api/pagination/#second-request", 
            "text": "Sample query:   { \n     query :   {           conversions (created_from: 1525132800 created_to: 1527202238 first: 50, offset: 50) {              affiliate {                  name,                   email              },               total,               commission_total,               currency,               created          }       }  }   Notice the offset command, which fetches you the next 50 results starting from record #51", 
            "title": "Second request:"
        }, 
        {
            "location": "/graphql-api/pagination/#third-request", 
            "text": "Sample query:   { \n     query :   {           conversions (created_from: 1525132800 created_to: 1527202238 first: 50, offset: 100) {               affiliate {                  name,                   email              },               total,               commission_total,               currency,               created          }      }  }   This gets you records #101-150", 
            "title": "Third request:"
        }, 
        {
            "location": "/graphql-api/pagination/#fourth-request", 
            "text": "Sample query:   { \n     query :   {           conversions (created_from: 1525132800 first: 50, offset: 150) {               affiliate {                  name,                   email              },               total,               commission_total,               currency,               created          }      }  }   This gets you records #151-200  Repeat the above for larger number of results until you get all the data returned.", 
            "title": "Fourth request:"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-merchants/", 
            "text": "GraphQL for Merchants\n\n\nGet a list of your conversions from May 2018\n\n\nSample query:\n\n\n{\n\n  \nquery\n:\n \n{ \n\n\n      conversions (created_from: 1525132800 created_to: 1527202238) { \n\n\n          affiliate {\n\n\n              name, \n\n\n              email\n\n\n          }, \n\n\n          total, \n\n\n          commission_total, \n\n\n          currency, \n\n\n          created\n\n\n      }\n\n\n  }\n\n\n}\n\n\n\n\n\n\nNote\n: timestamp is in Unix time\n\n\n\n\nSample response:\n\n\n{\n\n    \ndata\n:\n \n{\n\n        \nconversions\n:\n \n[\n\n            \n{\n\n                \naffiliate\n:\n \n{\n\n                    \nname\n:\n \nABC\n,\n\n                    \nemail\n:\n \nabc@refersion.com\n\n                \n},\n\n                \ntotal\n:\n \n24.00\n,\n\n                \ncommission_total\n:\n \n4.80\n,\n\n                \ncurrency\n:\n \nUSD\n,\n\n                \ncreated\n:\n \n1526674258\n\n            \n},\n\n            \n{\n\n                \naffiliate\n:\n \n{\n\n                    \nname\n:\n \nDEF\n,\n\n                    \nemail\n:\n \ndef@refersion.com\n\n                \n},\n\n                \ntotal\n:\n \n630.00\n,\n\n                \ncommission_total\n:\n \n346.50\n,\n\n                \ncurrency\n:\n \nCAD\n,\n\n                \ncreated\n:\n \n1526671881\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nGet a list of affiliates and their referral parameters\n\n\nSample query: \n\n\n{\n\n  \nquery\n:\n \n{ \n\n\n      affiliates {\n\n\n          status, \n\n\n          name, \n\n\n          email, \n\n\n          rfsn_parameter\n\n\n      }\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\nSample response:\n\n\n{\n\n    \ndata\n:\n \n{\n\n        \naffiliates\n:\n \n[\n\n            \n{\n\n                \nstatus\n:\n \nACTIVE\n,\n\n                \nname\n:\n \nAffiliate A\n,\n\n                \nemail\n:\n \naffiliate@refersion.com\n,\n\n                \nrfsn_parameter\n:\n \nrfsn=123456.1234c\n\n            \n},\n\n            \n{\n\n                \nstatus\n:\n \nACTIVE\n,\n\n                \nname\n:\n \nInfluencer B\n,\n\n                \nemail\n:\n \ninfluencer@refersion.com\n,\n\n                \nrfsn_parameter\n:\n \nrfsn=123456.238e5\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}", 
            "title": "GraphQL for Merchants"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-merchants/#graphql-for-merchants", 
            "text": "", 
            "title": "GraphQL for Merchants"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-merchants/#get-a-list-of-your-conversions-from-may-2018", 
            "text": "Sample query:  { \n   query :   {         conversions (created_from: 1525132800 created_to: 1527202238) {             affiliate {                name,                 email            },             total,             commission_total,             currency,             created        }    }  }   Note : timestamp is in Unix time   Sample response:  { \n     data :   { \n         conversions :   [ \n             { \n                 affiliate :   { \n                     name :   ABC , \n                     email :   abc@refersion.com \n                 }, \n                 total :   24.00 , \n                 commission_total :   4.80 , \n                 currency :   USD , \n                 created :   1526674258 \n             }, \n             { \n                 affiliate :   { \n                     name :   DEF , \n                     email :   def@refersion.com \n                 }, \n                 total :   630.00 , \n                 commission_total :   346.50 , \n                 currency :   CAD , \n                 created :   1526671881 \n             } \n         ] \n     }  }", 
            "title": "Get a list of your conversions from May 2018"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-merchants/#get-a-list-of-affiliates-and-their-referral-parameters", 
            "text": "Sample query:   { \n   query :   {         affiliates {            status,             name,             email,             rfsn_parameter        }    }  }    Sample response:  { \n     data :   { \n         affiliates :   [ \n             { \n                 status :   ACTIVE , \n                 name :   Affiliate A , \n                 email :   affiliate@refersion.com , \n                 rfsn_parameter :   rfsn=123456.1234c \n             }, \n             { \n                 status :   ACTIVE , \n                 name :   Influencer B , \n                 email :   influencer@refersion.com , \n                 rfsn_parameter :   rfsn=123456.238e5 \n             } \n         ] \n     }  }", 
            "title": "Get a list of affiliates and their referral parameters"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-marketplace-users/", 
            "text": "GraphQL for Marketplace Users\n\n\nGet a list of all your merchants and referral parameters\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        affiliates {\n\n\n            shop {\n\n\n                name, \n\n\n                url\n\n\n            }, \n\n\n            id, \n\n\n            status, \n\n\n            rfsn_parameter\n\n\n        } \n\n\n    }\n\n\n}\n\n\n\n\n\n\n\n\nSample response\n\n\n{\n\n    \ndata\n:\n \n{\n\n        \naffiliates\n:\n \n[\n\n            \n{\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-demo\n,\n\n                    \nurl\n:\n \nhttp://refersion-demo.refersion.com\n\n                \n},\n\n                \nid\n:\n \n123456\n,\n\n                \nstatus\n:\n \nACTIVE\n,\n\n                \nrfsn_parameter\n:\n \nrfsn=1111110.c4845\n\n            \n},\n\n            \n{\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-test\n,\n\n                    \nurl\n:\n \nhttp://refersion-test.refersion.com\n\n                \n},\n\n                \nid\n:\n \n234578\n,\n\n                \nstatus\n:\n \nACTIVE\n,\n\n                \nrfsn_parameter\n:\n \nrfsn=111111.1111a\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nGet a list of your conversions and payment status in May 2018\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        conversions (created_from: 1525132800 created_to: 1527202238) { \n\n\n            total, \n\n\n            commission_total, \n\n\n            currency, \n\n\n            created, \n\n\n            shop {name}, \n\n\n            payment {created}\n\n\n        }\n\n\n    }\n\n\n}\n\n\n\n\n\n\nNote\n: timestamp is in Unix time\n\n\n\n\nSample response:\n\n\n{\n\n    \ndata\n:\n \n{\n\n        \nconversions\n:\n \n[\n\n            \n{\n\n                \ntotal\n:\n \n24.00\n,\n\n                \ncommission_total\n:\n \n4.80\n,\n\n                \ncurrency\n:\n \nUSD\n,\n\n                \ncreated\n:\n \n1526674258\n,\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-test\n\n                \n},\n\n                \npayment\n:\n \n{\n\n                    \ncreated\n:\n \n1527027021\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \ntotal\n:\n \n0.00\n,\n\n                \ncommission_total\n:\n \n1.00\n,\n\n                \ncurrency\n:\n \nUSD\n,\n\n                \ncreated\n:\n \n1525717323\n,\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-test\n\n                \n},\n\n                \npayment\n:\n \nnull\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nGet a list of all payments you received in May 2018\n\n\nSample query: \n\n\n{\n\n    \nquery\n:\n \n{ \n\n\n        payments (created_from:1525132800 created_to: 1527202238) { \n\n\n            id, \n\n\n            created, \n\n\n            commission_total, \n\n\n            total_conversions, \n\n\n            shop {name} \n\n\n        }\n\n\n    }\n\n\n}\n\n\n\n\n\n\n\n\nSample response\n\n\n{\n\n    \ndata\n:\n \n{\n\n        \npayments\n:\n \n[\n\n            \n{\n\n                \nid\n:\n \n13453\n,\n\n                \ncreated\n:\n \n1527193893\n,\n\n                \ncommission_total\n:\n \n9.40\n,\n\n                \ncurrency\n:\n \nUSD\n,\n\n                \ntotal_conversions\n:\n \n6\n,\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-test\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \nid\n:\n \n43543\n,\n\n                \ncreated\n:\n \n1527106481\n,\n\n                \ncommission_total\n:\n \n34.00\n,\n\n                \ncurrency\n:\n \nCAD\n,\n\n                \ntotal_conversions\n:\n \n1\n,\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-test\n\n                \n}\n\n            \n},\n\n            \n{\n\n                \nid\n:\n \n46843\n,\n\n                \ncreated\n:\n \n1527106481\n,\n\n                \ncommission_total\n:\n \n122.00\n,\n\n                \ncurrency\n:\n \nGBP\n,\n\n                \ntotal_conversions\n:\n \n1\n,\n\n                \nshop\n:\n \n{\n\n                    \nname\n:\n \nrefersion-test\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n}", 
            "title": "GraphQL for Marketplace Users"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-marketplace-users/#graphql-for-marketplace-users", 
            "text": "", 
            "title": "GraphQL for Marketplace Users"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-marketplace-users/#get-a-list-of-all-your-merchants-and-referral-parameters", 
            "text": "Sample query:   { \n     query :   {           affiliates {              shop {                  name,                   url              },               id,               status,               rfsn_parameter          }       }  }    Sample response  { \n     data :   { \n         affiliates :   [ \n             { \n                 shop :   { \n                     name :   refersion-demo , \n                     url :   http://refersion-demo.refersion.com \n                 }, \n                 id :   123456 , \n                 status :   ACTIVE , \n                 rfsn_parameter :   rfsn=1111110.c4845 \n             }, \n             { \n                 shop :   { \n                     name :   refersion-test , \n                     url :   http://refersion-test.refersion.com \n                 }, \n                 id :   234578 , \n                 status :   ACTIVE , \n                 rfsn_parameter :   rfsn=111111.1111a \n             } \n         ] \n     }  }", 
            "title": "Get a list of all your merchants and referral parameters"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-marketplace-users/#get-a-list-of-your-conversions-and-payment-status-in-may-2018", 
            "text": "Sample query:   { \n     query :   {           conversions (created_from: 1525132800 created_to: 1527202238) {               total,               commission_total,               currency,               created,               shop {name},               payment {created}          }      }  }   Note : timestamp is in Unix time   Sample response:  { \n     data :   { \n         conversions :   [ \n             { \n                 total :   24.00 , \n                 commission_total :   4.80 , \n                 currency :   USD , \n                 created :   1526674258 , \n                 shop :   { \n                     name :   refersion-test \n                 }, \n                 payment :   { \n                     created :   1527027021 \n                 } \n             }, \n             { \n                 total :   0.00 , \n                 commission_total :   1.00 , \n                 currency :   USD , \n                 created :   1525717323 , \n                 shop :   { \n                     name :   refersion-test \n                 }, \n                 payment :   null \n             } \n         ] \n     }  }", 
            "title": "Get a list of your conversions and payment status in May 2018"
        }, 
        {
            "location": "/graphql-api/example-queries/graphql-for-marketplace-users/#get-a-list-of-all-payments-you-received-in-may-2018", 
            "text": "Sample query:   { \n     query :   {           payments (created_from:1525132800 created_to: 1527202238) {               id,               created,               commission_total,               total_conversions,               shop {name}           }      }  }    Sample response  { \n     data :   { \n         payments :   [ \n             { \n                 id :   13453 , \n                 created :   1527193893 , \n                 commission_total :   9.40 , \n                 currency :   USD , \n                 total_conversions :   6 , \n                 shop :   { \n                     name :   refersion-test \n                 } \n             }, \n             { \n                 id :   43543 , \n                 created :   1527106481 , \n                 commission_total :   34.00 , \n                 currency :   CAD , \n                 total_conversions :   1 , \n                 shop :   { \n                     name :   refersion-test \n                 } \n             }, \n             { \n                 id :   46843 , \n                 created :   1527106481 , \n                 commission_total :   122.00 , \n                 currency :   GBP , \n                 total_conversions :   1 , \n                 shop :   { \n                     name :   refersion-test \n                 } \n             } \n         ] \n     }  }", 
            "title": "Get a list of all payments you received in May 2018"
        }, 
        {
            "location": "/rest-api/overview/", 
            "text": "REST API Overview\n\n\nThe Refersion API is organized around REST, which is easily accessible using most modern programming languages. Our API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. In addition, valid JSON will be returned in all responses from the API, including errors.\n\n\n\n\nView REST API Docs", 
            "title": "Overview"
        }, 
        {
            "location": "/rest-api/overview/#rest-api-overview", 
            "text": "The Refersion API is organized around REST, which is easily accessible using most modern programming languages. Our API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. In addition, valid JSON will be returned in all responses from the API, including errors.   View REST API Docs", 
            "title": "REST API Overview"
        }
    ]
}